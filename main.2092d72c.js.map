{"version":3,"sources":["scripts/main.js"],"names":["startBtn","document","querySelector","messageStart","messageLost","messageWin","GameFild","cells","querySelectorAll","scoreFild","gameFild","previousGameFild","randomCell","MAX","MIN","_score","FIRST_COLUMN","SECOND_COLUMN","THIRD_COLUMN","LAST_COLUMN","setScore","forEach","el","i","textContent","removeAttribute","classList","add","push","Math","floor","random","renderGameFild","result","includes","length","remove","JSON","stringify","newValue","counter","setTimeout","addNew","arr","method","splice","reduce","acc","item","map","row","inx","rowWithoutNull","filter","unshift","sumCells","reverse","n","score","game","addEventListener","e","init","canContinue","key","moveRight","moveLeft","moveUp","moveDown"],"mappings":";AAAA,aA2WA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAzWA,IAAMA,EAAWC,SAASC,cAAc,UAClCC,EAAeF,SAASC,cAAc,kBACtCE,EAAcH,SAASC,cAAc,iBACrCG,EAAaJ,SAASC,cAAc,gBAEpCI,EAAAA,WACU,SAAA,IAAA,EAAA,KAAA,GACPC,KAAAA,MAAQN,SAASO,iBAAiB,eAClCC,KAAAA,UAAYR,SAASC,cAAc,eACnCQ,KAAAA,SAAW,GACXC,KAAAA,iBAAmB,GACnBC,KAAAA,WAAa,EACbC,KAAAA,IAAM,GACNC,KAAAA,IAAM,EACNC,KAAAA,OAAS,EACTC,KAAAA,aAAe,CAAC,EAAG,EAAG,EAAG,IACzBC,KAAAA,cAAgB,CAAC,EAAG,EAAG,EAAG,IAC1BC,KAAAA,aAAe,CAAC,EAAG,EAAG,GAAI,IAC1BC,KAAAA,YAAc,CAAC,EAAG,EAAG,GAAI,IAuVlC,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OApVS,MAAA,WAAA,IAAA,EAAA,KACAT,KAAAA,SAAW,GACXU,KAAAA,SAAS,GAETb,KAAAA,MAAMc,QAAQ,SAACC,EAAIC,GACtBD,EAAGE,YAAc,EAAKd,SAASa,GAC/BD,EAAGG,gBAAgB,SACnBH,EAAGI,UAAUC,IAAI,gBAGd,IAAA,IAAIJ,EAAI,EAAGA,EAAI,GAAIA,IACjBb,KAAAA,SAASkB,KAAK,MAGhB,IAAA,IAAIL,EAAI,EAAGA,EAAI,EAAGA,IAChBX,KAAAA,WACDiB,KAAKC,MAAMD,KAAKE,UAAY,KAAKlB,IAAM,KAAKC,IAAM,IAAM,KAAKA,IAE5DJ,KAAAA,SAAS,KAAKE,YAAc,EAG9BD,KAAAA,iBAAuB,EAAA,KAAKD,UAE5BsB,KAAAA,iBAELhC,EAASwB,YAAc,UACvBxB,EAAS0B,UAAUC,IAAI,WACvBxB,EAAauB,UAAUC,IAAI,UAC3BvB,EAAYsB,UAAUC,IAAI,UAC1BtB,EAAWqB,UAAUC,IAAI,YAuT7B,CAAA,IAAA,cApTgB,MAAA,WACRM,IAAAA,GAAS,EAET,GAAA,KAAKvB,SAASwB,SAAS,MAClB,OAAA,EAGJ,IAAA,IAAIX,EAAI,EAAGA,EAAI,KAAKb,SAASyB,OAAQZ,IACpC,IAAA,KAAKJ,YAAYe,SAASX,IAI1B,KAAKb,SAASa,KAAO,KAAKb,SAASa,EAAI,GAAI,CAC7CU,GAAS,EACT,MAIC,IAAA,IAAIV,EAAI,EAAGA,EAAI,KAAKb,SAASyB,OAAQZ,IACpC,GAAA,KAAKb,SAASa,KAAO,KAAKb,SAASa,EAAI,GAAI,CAC7CU,GAAS,EACT,MAQGA,OAJFA,GACH7B,EAAYsB,UAAUU,OAAO,UAGxBH,IAuRX,CAAA,IAAA,iBApRmB,MAAA,WAAA,IAAA,EAAA,KACV1B,KAAAA,MAAMc,QAAQ,SAACC,EAAIC,GACtBD,EAAGE,YAAc,EAAKd,SAASa,GAC/BD,EAAGG,gBAAgB,SACnBH,EAAGI,UAAUC,IAAI,cACjBL,EAAGI,UAAUC,IAAmBL,eAAAA,OAAAA,EAAGE,kBA+QzC,CAAA,IAAA,SA3QW,MAAA,WAAA,IAAA,EAAA,KACH,GAAC,KAAKd,SAASwB,SAAS,OAK1BG,KAAKC,UAAU,KAAK3B,oBAAsB0B,KAAKC,UAAU,KAAK5B,UAA9D2B,CAKEE,IAAAA,EAAW,EACXC,EAAU,EAaV,GAXY,KAAZA,IACFA,EAAU,KAAK5B,YAGZA,KAAAA,WACDiB,KAAKC,MAAMD,KAAKE,UAAY,KAAKlB,IAAM,KAAKC,IAAM,IAAM,KAAKA,IAE7D,KAAKF,aAAe4B,IACtBD,EAAW,GAG0B,OAAnC,KAAK7B,SAAS,KAAKE,YAUrB,OATKF,KAAAA,SAAS,KAAKE,YAAc2B,EAEjCE,WAAW,WACT,EAAKT,kBACJ,UAGErB,KAAAA,iBAAuB,EAAA,KAAKD,WAK9BgC,KAAAA,YAqOT,CAAA,IAAA,WAlOWC,MAAAA,SAAAA,EAAKC,GACP,IAAA,IAAIrB,EAAIoB,EAAIR,OAAS,EAAGZ,EAAI,EAAGA,IAC9BoB,GAAW,OAAXA,EAAIpB,IAIJoB,EAAIpB,KAAOoB,EAAIpB,EAAI,GAAI,CACpBR,KAAAA,QAAU4B,EAAIpB,GACnBoB,EAAIpB,IAAM,EACVoB,EAAIE,OAAOtB,EAAI,EAAG,GAClBoB,EAAIC,GAAQ,MACZ,SAuNR,CAAA,IAAA,YAlNc,MAAA,WAAA,IAAA,EAAA,KAELlC,KAAAA,SAAW,KAAKA,SAASoC,OAC5B,SAACC,EAAKC,EAAMzB,GAiBHwB,OAhBHxB,EAAI,GACNwB,EAAI,GAAGnB,KAAKoB,GAGVzB,EAAI,GAAKA,EAAI,GACfwB,EAAI,GAAGnB,KAAKoB,GAGVzB,EAAI,GAAKA,EAAI,IACfwB,EAAI,GAAGnB,KAAKoB,GAGVzB,EAAI,IAAMA,EAAI,IAChBwB,EAAI,GAAGnB,KAAKoB,GAGPD,GAET,CAAC,GAAI,GAAI,GAAI,KAIVrC,KAAAA,SAAW,KAAKA,SAASuC,IAAI,SAACC,EAAKC,GAI/BC,IAFDA,IAAAA,EAAiBF,EAAIG,OAAO,SAAC/B,GAAOA,OAAO,OAAPA,IAEnC8B,EAAejB,OAAS,GAC7BiB,EAAeE,QAAQ,MAMlBF,OAFP,EAAKG,SAASH,EAAgB,WAEvBA,IAIJ1C,KAAAA,SAAW,KAAKA,SAASoC,OAAO,SAACC,EAAKG,GAC9BH,MAAAA,GAAAA,OAAAA,EAAAA,GAAQG,EAAAA,KAClB,MAuKP,CAAA,IAAA,WApKa,MAAA,WAAA,IAAA,EAAA,KAEJxC,KAAAA,SAAW,KAAKA,SAASoC,OAC5B,SAACC,EAAKC,EAAMzB,GAiBHwB,OAhBHxB,EAAI,GACNwB,EAAI,GAAGnB,KAAKoB,GAGVzB,EAAI,GAAKA,EAAI,GACfwB,EAAI,GAAGnB,KAAKoB,GAGVzB,EAAI,GAAKA,EAAI,IACfwB,EAAI,GAAGnB,KAAKoB,GAGVzB,EAAI,IAAMA,EAAI,IAChBwB,EAAI,GAAGnB,KAAKoB,GAGPD,GAET,CAAC,GAAI,GAAI,GAAI,KAIVrC,KAAAA,SAAW,KAAKA,SAASuC,IAAI,SAACC,EAAKC,GAI/BC,IAFDA,IAAAA,EAAiBF,EAAIG,OAAO,SAAC/B,GAAOA,OAAO,OAAPA,IAEnC8B,EAAejB,OAAS,GAC7BiB,EAAexB,KAAK,MAMfwB,OAFP,EAAKG,SAASH,EAAgB,QAEvBA,IAIJ1C,KAAAA,SAAW,KAAKA,SAASoC,OAAO,SAACC,EAAKG,GAC9BH,MAAAA,GAAAA,OAAAA,EAAAA,GAAQG,EAAAA,KAClB,MAyHP,CAAA,IAAA,SAtHW,MAAA,WAAA,IAAA,EAAA,KACFxC,KAAAA,SAAW,KAAKA,SAASoC,OAC5B,SAACC,EAAKC,EAAMzB,GAiBHwB,OAhBH,EAAK/B,aAAakB,SAASX,IAC7BwB,EAAI,GAAGnB,KAAKoB,GAGV,EAAK/B,cAAciB,SAASX,IAC9BwB,EAAI,GAAGnB,KAAKoB,GAGV,EAAK9B,aAAagB,SAASX,IAC7BwB,EAAI,GAAGnB,KAAKoB,GAGV,EAAK7B,YAAYe,SAASX,IAC5BwB,EAAI,GAAGnB,KAAKoB,GAGPD,GAET,CAAC,GAAI,GAAI,GAAI,KAIVrC,KAAAA,SAAW,KAAKA,SAASuC,IAAI,SAACC,EAAKC,GAI/BC,IAFDA,IAAAA,EAAiBF,EAAIG,OAAO,SAAC/B,GAAOA,OAAO,OAAPA,IAEnC8B,EAAejB,OAAS,GAC7BiB,EAAexB,KAAK,MAMfwB,OAFP,EAAKG,SAASH,EAAeI,UAAW,WAEjCJ,IAMJ,IAFCT,IAAAA,EAAM,GAEHc,EAAI,KAAK/C,SAASyB,OAAS,EAAGsB,GAAK,EAAGA,IACxC,IAAA,IAAIlC,EAAI,EAAGA,EAAI,KAAKb,SAASyB,OAAQZ,IACxCoB,EAAIf,KAAK,KAAKlB,SAASa,GAAGkC,IAIzB/C,KAAAA,SAAWiC,IAsEpB,CAAA,IAAA,WAnEa,MAAA,WAAA,IAAA,EAAA,KACJjC,KAAAA,SAAW,KAAKA,SAASoC,OAC5B,SAACC,EAAKC,EAAMzB,GAiBHwB,OAhBH,EAAK/B,aAAakB,SAASX,IAC7BwB,EAAI,GAAGnB,KAAKoB,GAGV,EAAK/B,cAAciB,SAASX,IAC9BwB,EAAI,GAAGnB,KAAKoB,GAGV,EAAK9B,aAAagB,SAASX,IAC7BwB,EAAI,GAAGnB,KAAKoB,GAGV,EAAK7B,YAAYe,SAASX,IAC5BwB,EAAI,GAAGnB,KAAKoB,GAGPD,GAET,CAAC,GAAI,GAAI,GAAI,KAIVrC,KAAAA,SAAW,KAAKA,SAASuC,IAAI,SAACC,EAAKC,GAI/BC,IAFDA,IAAAA,EAAiBF,EAAIG,OAAO,SAAC/B,GAAOA,OAAO,OAAPA,IAEnC8B,EAAejB,OAAS,GAC7BiB,EAAeE,QAAQ,MAOlBF,OAHP,EAAKG,SAASH,EAAeI,UAAW,QAGjCJ,IAMJ,IAFCT,IAAAA,EAAM,GAEHc,EAAI,KAAK/C,SAASyB,OAAS,EAAGsB,GAAK,EAAGA,IACxC,IAAA,IAAIlC,EAAI,EAAGA,EAAI,KAAKb,SAASyB,OAAQZ,IACxCoB,EAAIf,KAAK,KAAKlB,SAASa,GAAGkC,IAIzB/C,KAAAA,SAAWiC,IAkBpB,CAAA,IAAA,WAfWe,MAAAA,SAAAA,GACFjD,KAAAA,UAAUe,YAAc,KAAKT,OAEd,OAAhB,KAAKA,QACPV,EAAWqB,UAAUU,OAAO,cAWlC,EApWM9B,GA8VAqD,EAAO,IAAIrD,EAEjBN,EAAS4D,iBAAiB,QAAS,SAACC,GAClCF,EAAKG,SAGP7D,SAAS2D,iBAAiB,UAAW,SAACC,GAChC,GAACF,EAAKI,cAAN,CAMU,eAAVF,EAAEG,KACJL,EAAKM,YAGO,cAAVJ,EAAEG,KACJL,EAAKO,WAGO,YAAVL,EAAEG,KACJL,EAAKQ,SAGO,cAAVN,EAAEG,KACJL,EAAKS,WAfS,CAAC,aAAc,YAAa,UAAW,aAkB3ClC,SAAS2B,EAAEG,OACrBL,EAAK3B,iBACL2B,EAAKvC,WACLuC,EAAKjB","file":"main.2092d72c.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst startBtn = document.querySelector('.start');\nconst messageStart = document.querySelector('.message-start');\nconst messageLost = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\n\nclass GameFild {\n  constructor() {\n    this.cells = document.querySelectorAll('.field-cell');\n    this.scoreFild = document.querySelector('.game-score');\n    this.gameFild = [];\n    this.previousGameFild = [];\n    this.randomCell = 0;\n    this.MAX = 15;\n    this.MIN = 0;\n    this._score = 0;\n    this.FIRST_COLUMN = [0, 4, 8, 12];\n    this.SECOND_COLUMN = [1, 5, 9, 13];\n    this.THIRD_COLUMN = [2, 6, 10, 14];\n    this.LAST_COLUMN = [3, 7, 11, 15];\n  }\n\n  init() {\n    this.gameFild = [];\n    this.setScore(0);\n\n    this.cells.forEach((el, i) => {\n      el.textContent = this.gameFild[i];\n      el.removeAttribute('class');\n      el.classList.add('field-cell');\n    });\n\n    for (let i = 0; i < 16; i++) {\n      this.gameFild.push(null);\n    }\n\n    for (let i = 0; i < 2; i++) {\n      this.randomCell\n        = Math.floor(Math.random() * (this.MAX - this.MIN + 1)) + this.MIN;\n\n      this.gameFild[this.randomCell] = 2;\n    }\n\n    this.previousGameFild = [...this.gameFild];\n\n    this.renderGameFild();\n\n    startBtn.textContent = 'Restart';\n    startBtn.classList.add('restart');\n    messageStart.classList.add('hidden');\n    messageLost.classList.add('hidden');\n    messageWin.classList.add('hidden');\n  }\n\n  canContinue() {\n    let result = false;\n\n    if (this.gameFild.includes(null)) {\n      return true;\n    }\n\n    for (let i = 0; i < this.gameFild.length; i++) {\n      if (this.LAST_COLUMN.includes(i)) {\n        continue;\n      }\n\n      if (this.gameFild[i] === this.gameFild[i + 1]) {\n        result = true;\n        break;\n      }\n    }\n\n    for (let i = 0; i < this.gameFild.length; i++) {\n      if (this.gameFild[i] === this.gameFild[i + 4]) {\n        result = true;\n        break;\n      }\n    }\n\n    if (!result) {\n      messageLost.classList.remove('hidden');\n    }\n\n    return result;\n  }\n\n  renderGameFild() {\n    this.cells.forEach((el, i) => {\n      el.textContent = this.gameFild[i];\n      el.removeAttribute('class');\n      el.classList.add('field-cell');\n      el.classList.add(`field-cell--${el.textContent}`);\n    });\n  }\n  // add new cell with 2 or 4, if it is possible\n  addNew() {\n    if (!this.gameFild.includes(null)) {\n      return;\n    }\n\n    if (\n      JSON.stringify(this.previousGameFild) === JSON.stringify(this.gameFild)\n    ) {\n      return;\n    }\n\n    let newValue = 2;\n    let counter = 5; // to change new cell value from 2 to 4\n\n    if (counter === 15) {\n      counter = this.randomCell;\n    }\n\n    this.randomCell\n      = Math.floor(Math.random() * (this.MAX - this.MIN + 1)) + this.MIN;\n\n    if (this.randomCell === counter) {\n      newValue = 4;\n    }\n\n    if (this.gameFild[this.randomCell] === null) {\n      this.gameFild[this.randomCell] = newValue;\n\n      setTimeout(() => {\n        this.renderGameFild();\n      }, 200);\n\n      // check if it can be moved in a given direction\n      this.previousGameFild = [...this.gameFild];\n\n      return;\n    }\n\n    this.addNew();\n  }\n  // addition of the nearest cell if they are equal\n  sumCells(arr, method) {\n    for (let i = arr.length - 1; i > 0; i--) {\n      if (arr[i] === null) {\n        continue;\n      }\n\n      if (arr[i] === arr[i - 1]) {\n        this._score += arr[i];\n        arr[i] *= 2;\n        arr.splice(i - 1, 1);\n        arr[method](null);\n        break;\n      }\n    }\n  }\n\n  moveRight() {\n    // create rows [[row1], [row2], [row3], [row4]]\n    this.gameFild = this.gameFild.reduce(\n      (acc, item, i) => {\n        if (i < 4) {\n          acc[0].push(item);\n        }\n\n        if (i > 3 && i < 8) {\n          acc[1].push(item);\n        }\n\n        if (i > 7 && i < 12) {\n          acc[2].push(item);\n        }\n\n        if (i > 11 && i < 16) {\n          acc[3].push(item);\n        }\n\n        return acc;\n      },\n      [[], [], [], []],\n    );\n\n    // move all filled cells to right + add equel cells\n    this.gameFild = this.gameFild.map((row, inx) => {\n      // move all filled cells to right\n      const rowWithoutNull = row.filter((el) => el !== null);\n\n      while (rowWithoutNull.length < 4) {\n        rowWithoutNull.unshift(null);\n      }\n\n      // add equel cells\n      this.sumCells(rowWithoutNull, 'unshift');\n\n      return rowWithoutNull;\n    });\n\n    // collect gameFild for render\n    this.gameFild = this.gameFild.reduce((acc, row) => {\n      return [...acc, ...row];\n    }, []);\n  }\n\n  moveLeft() {\n    // create rows [[row1], [row2], [row3], [row4]]\n    this.gameFild = this.gameFild.reduce(\n      (acc, item, i) => {\n        if (i < 4) {\n          acc[0].push(item);\n        };\n\n        if (i > 3 && i < 8) {\n          acc[1].push(item);\n        };\n\n        if (i > 7 && i < 12) {\n          acc[2].push(item);\n        };\n\n        if (i > 11 && i < 16) {\n          acc[3].push(item);\n        };\n\n        return acc;\n      },\n      [[], [], [], []],\n    );\n\n    // move all filled cells to right + add equel cells\n    this.gameFild = this.gameFild.map((row, inx) => {\n      // move all filled cells to right\n      const rowWithoutNull = row.filter((el) => el !== null);\n\n      while (rowWithoutNull.length < 4) {\n        rowWithoutNull.push(null);\n      }\n\n      // add equel cells\n      this.sumCells(rowWithoutNull, 'push');\n\n      return rowWithoutNull;\n    });\n\n    // collect gameFild for render\n    this.gameFild = this.gameFild.reduce((acc, row) => {\n      return [...acc, ...row];\n    }, []);\n  }\n\n  moveUp() {\n    this.gameFild = this.gameFild.reduce(\n      (acc, item, i) => {\n        if (this.FIRST_COLUMN.includes(i)) {\n          acc[0].push(item);\n        }\n\n        if (this.SECOND_COLUMN.includes(i)) {\n          acc[1].push(item);\n        }\n\n        if (this.THIRD_COLUMN.includes(i)) {\n          acc[2].push(item);\n        }\n\n        if (this.LAST_COLUMN.includes(i)) {\n          acc[3].push(item);\n        }\n\n        return acc;\n      },\n      [[], [], [], []],\n    );\n\n    // move all filled cells to right + add equel cells\n    this.gameFild = this.gameFild.map((row, inx) => {\n      // move all filled cells to right\n      const rowWithoutNull = row.filter((el) => el !== null);\n\n      while (rowWithoutNull.length < 4) {\n        rowWithoutNull.push(null);\n      }\n\n      // add equel cells\n      this.sumCells(rowWithoutNull.reverse(), 'unshift');\n\n      return rowWithoutNull;\n    });\n\n    // collect gameFild for render\n    const arr = [];\n\n    for (let n = this.gameFild.length - 1; n >= 0; n--) {\n      for (let i = 0; i < this.gameFild.length; i++) {\n        arr.push(this.gameFild[i][n]);\n      }\n    }\n\n    this.gameFild = arr;\n  }\n\n  moveDown() {\n    this.gameFild = this.gameFild.reduce(\n      (acc, item, i) => {\n        if (this.FIRST_COLUMN.includes(i)) {\n          acc[0].push(item);\n        }\n\n        if (this.SECOND_COLUMN.includes(i)) {\n          acc[1].push(item);\n        }\n\n        if (this.THIRD_COLUMN.includes(i)) {\n          acc[2].push(item);\n        }\n\n        if (this.LAST_COLUMN.includes(i)) {\n          acc[3].push(item);\n        }\n\n        return acc;\n      },\n      [[], [], [], []],\n    );\n\n    // move all filled cells to right + add equel cells\n    this.gameFild = this.gameFild.map((row, inx) => {\n      // move all filled cells to right\n      const rowWithoutNull = row.filter((el) => el !== null);\n\n      while (rowWithoutNull.length < 4) {\n        rowWithoutNull.unshift(null);\n      }\n\n      // add equel cells\n      this.sumCells(rowWithoutNull.reverse(), 'push');\n\n      // console.log(rowWithoutNull)\n      return rowWithoutNull;\n    });\n\n    // collect gameFild for render\n    const arr = [];\n\n    for (let n = this.gameFild.length - 1; n >= 0; n--) {\n      for (let i = 0; i < this.gameFild.length; i++) {\n        arr.push(this.gameFild[i][n]);\n      }\n    }\n\n    this.gameFild = arr;\n  }\n\n  setScore(score) {\n    this.scoreFild.textContent = this._score;\n\n    if (this._score === 2048) {\n      messageWin.classList.remove('hidden');\n    }\n  }\n}\n\nconst game = new GameFild();\n\nstartBtn.addEventListener('click', (e) => {\n  game.init();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (!game.canContinue()) {\n    return;\n  }\n\n  const buttons = ['ArrowRight', 'ArrowLeft', 'ArrowUp', 'ArrowDown'];\n\n  if (e.key === 'ArrowRight') {\n    game.moveRight();\n  };\n\n  if (e.key === 'ArrowLeft') {\n    game.moveLeft();\n  }\n\n  if (e.key === 'ArrowUp') {\n    game.moveUp();\n  }\n\n  if (e.key === 'ArrowDown') {\n    game.moveDown();\n  }\n\n  if (buttons.includes(e.key)) {\n    game.renderGameFild();\n    game.setScore();\n    game.addNew();\n  }\n});\n"]}